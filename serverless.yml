service: ${env:BUILD_PROJECT}-github-webhook

plugins:
  - serverless-step-functions
  - serverless-parameters
  - serverless-portable-templates
  - serverless-pseudo-parameters

custom:
  githubStatusContext: codebuild-ci
  parameters:
    GithubUsername:
      Type: String
      Default: ${env:GITHUB_USERNAME}
      Description: Github username, this is the user which will be displayed
    GithubRepository:
      Type: String
      Default: ${env:GITHUB_REPOSITORY}
      Description: "Github repository url, eg: https://github.com/[username]/[repository]"
    GithubAccessToken:
      Type: String
      Default: ${env:GITHUB_ACCESS_TOKEN}
      Description: Your generated github access token
      NoEcho: true
    GithubStatusContext:
      Type: String
      Default: ${env:GITHUB_STATUS_CONTEXT, self:custom.githubStatusContext}
      Description: A label used to differentiate this status from other status integrations
    CodebuildProject:
      Type: String
      Default: ${env:BUILD_PROJECT}
      Description: Name of the build project that should be triggered
    CodeBuildSlackUrlCode:
      Type: String
      Default: ${env:SLACK_HOOK_URL_CODE}
      Description: Slack channel for integration.
    CodeBuildSlackChanel:
      Type: String
      Default: ${env:SLACK_CHANNEL}
      Description: Slack channel for integration.

provider:
  name: aws
  runtime: nodejs6.10
  stage: trigger
  timeout: 180
  versionFunctions: false
  memorySize: 128

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - codebuild:*
      Resource: "arn:aws:codebuild:#{AWS::Region}:#{AWS::AccountId}:project/${env:BUILD_PROJECT}"

  environment:
    BUILD_PROJECT:
      Ref: CodebuildProject
    GITHUB_USERNAME:
      Ref: GithubUsername
    GITHUB_ACCESS_TOKEN:
      Ref: GithubAccessToken
    GITHUB_REPOSITORY:
      Ref: GithubRepository
    GITHUB_STATUS_CONTEXT:
      Ref: GithubStatusContext
    SLACK_HOOK_URL_CODE:
      Ref: CodeBuildSlackUrlCode
    SLACK_CHANNEL:
      Ref: CodeBuildSlackChanel

functions:
  start-build:
    handler: handler.start_build

  check-build-status:
    handler: handler.check_build_status

  build-done:
    handler: handler.build_done

  webhook-resource:
    handler: webhook.resource

  start-build-proxy:
    handler: handler.start_build_proxy
    events:
      - http: post start-build-proxy
        method: post

resources:
  Resources:
    GithubWebhook:
      Type: Custom::GithubWebhook
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - WebhookDashresourceLambdaFunction
            - Arn
        Endpoint:
          Fn::Join:
            - ""
            -
              - https://
              - Ref: "ApiGatewayRestApi"
              - .execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}/start-build-proxy/

  Outputs:
    TriggerEndpoint:
      Value:
        Fn::Join:
          - ""
          -
            - https://
            - Ref: "ApiGatewayRestApi"
            - .execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}/start-build-proxy/

stepFunctions:
  stateMachines:
    build-for-commit:
      events:
        - http:
            path: trigger-build
            method: POST
      definition:
        Comment: "Check for build status for the given build project, and mark it when done on GH"
        StartAt: start_build
        States:
          start_build:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:#{AWS::StackName}-start-build"
            Next: check_start_build_outcome
          check_start_build_outcome:
            Type: Choice
            Choices:
            - Variable: "$.buildable"
              StringEquals: "true"
              Next: check_build_status
            Default: wait_start_build
          wait_start_build:
            Type: Wait
            Seconds: 10
            Next: start_build
          wait_a_bit:
            Type: Wait
            Seconds: 10
            Next: check_build_status
          check_build_status:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:#{AWS::StackName}-check-build-status"
            Next: check_build_status_outcome
            Retry:
              - ErrorEquals: [ "States.TaskFailed" ]
                IntervalSeconds: 3
                MaxAttempts: 3
          check_build_status_outcome:
            Type: Choice
            Choices:
            - Variable: "$.buildComplete"
              StringEquals: "completed"
              Next: build_done
            Default: wait_a_bit
          build_done:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:#{AWS::StackName}-build-done"
            End: true
